
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/01_ensemble_inference.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_01_ensemble_inference.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_01_ensemble_inference.py:


Running Ensemble Inference
==========================

The following notebook demostrates how to use Earth-2 MIP's config schema and builtin
inference workflows to perform ensemmble inference of the FourCastNetv2 small (FCNv2-sm)
weather model with an intial state pulled from the Climate Data Store (CDS) and
perturbed with random noise. The ensemble output will then be loaded into an Xarray
Dataset and some sample data analysis is provided.

In summary this notebook will cover the following topics:

- Configuring and setting up FCNv2 model registry
- An ensemble configuration file
- Running ensemble inference in Earth-2 MIP to produce an xarray DataSet
- Post processing results

.. GENERATED FROM PYTHON SOURCE LINES 37-41

Set Up
------
Starting off with imports, hopefully you have already installed Earth-2 MIP from this
repository. There are a few additional packages needed.

.. GENERATED FROM PYTHON SOURCE LINES 43-46

.. code-block:: Python

    import json
    import os








.. GENERATED FROM PYTHON SOURCE LINES 47-64

Prior to importing Earth-2 MIP, users need to be aware of a few enviroment variables
which can be used to customize Earth-2 MIPs global behavior. These must be set prior to
importing Earth-2 MIP. There are a number of different configuration options, some to
consider are:

- `WORLD_SIZE`: Tells Earth-2 MIP (which uses Modulus under the hood) the number of GPUs to use for inferencing.
- `MODEL_REGISTRY`: This variable tells Earth-2 MIP where location the model registery. By default this is located in `${HOME}/.cache/earth2mip/models`.

*Key Concept*: A model registry is a folder that Earth-2 MIP will explore to find model
checkpoints to load. A folder containing the required fileds is referred to as a
"model package". Model packages typically consist of a few files such as:

- `weights.tar`/`weights.mdlus`: the model checkpoint to load
- `metadata.json`: a JSON file that contains meta info regarding various details for using the model
- `config.json`: constains parameters needed to instantiate the model object in python
- `global_means.npy`: A numpy array containing the mean values used for normalization of data in the model
- `global_std.npy`: A numpy array containing the standard deviation values used for normalization of data in the model

.. GENERATED FROM PYTHON SOURCE LINES 66-74

.. code-block:: Python

    import dotenv
    import xarray

    dotenv.load_dotenv()

    # With the enviroment variables set now we import Earth-2 MIP
    from earth2mip import inference_ensemble, registry








.. GENERATED FROM PYTHON SOURCE LINES 75-89

The cell above created a model registry folder for us, but if this is your first
notebook its likely empty. Lets fix that. As previously metioned we will be using the
FCNv2-sm weather model with the checkpoint provided on the Nvidia Modulus model
registry. The model is shipped via a zip folder containing the required checkpoint files
discussed above.

Since this model is built into Earth-2 MIP, the `registry.get_model` function can be
used to auto-download and extract it (this can take a bit).
The `e2mip://` prefix on the model URI, will point Earth-2 MIP to use the package
fetch methods built into the model.
Without it, Earth-2 MIP will simply look for a `fcnv2_sm` folder in your model registry
and not attempt to download anything for you.
Once complete, go look in your `MODEL_REGISTRY` folder and the files needed for FCNv2
should now be present.

.. GENERATED FROM PYTHON SOURCE LINES 91-94

.. code-block:: Python

    print("Fetching model package...")
    package = registry.get_model("e2mip://fcnv2_sm")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Fetching model package...




.. GENERATED FROM PYTHON SOURCE LINES 95-107

The final setup step is to set up your CDS API key so we can access ERA5 data to act as
an initial state. Earth-2 MIP supports a number of different initial state data sources
that are supported including HDF5, CDS, GFS, etc. The CDS initial state provides a
convenient way to access a limited amount of historical weather data. Its recommended
for accessing an initial state, but larger data requirements should use locally stored
weather datasets.

Enter your CDS API uid and key below (found under your profile page).
If you don't a CDS API key, find out more here.

- `https://cds.climate.copernicus.eu/cdsapp#!/home <https://cds.climate.copernicus.eu/cdsapp#!/home>`_
- `https://cds.climate.copernicus.eu/api-how-to <https://cds.climate.copernicus.eu/api-how-to>`_

.. GENERATED FROM PYTHON SOURCE LINES 109-118

.. code-block:: Python

    cds_api = os.path.join(os.path.expanduser("~"), ".cdsapirc")
    if not os.path.exists(cds_api):
        uid = input("Enter in CDS UID (e.g. 123456): ")
        key = input("Enter your CDS API key (e.g. 12345678-1234-1234-1234-123456123456): ")
        # Write to config file for CDS library
        with open(cds_api, "w") as f:
            f.write("url: https://cds.climate.copernicus.eu/api/v2\n")
            f.write(f"key: {uid}:{key}\n")








.. GENERATED FROM PYTHON SOURCE LINES 119-146

Running Inference
-----------------

To run inference we will use the `earth2mip/ensemble_inference.py` part of Earth-2 MIP.
When this Python file, we provide either a config JSON file or a JSON serialized string
for it to parse. This config contains the information regarding how the model should run
inference. The schema of this can be found in `earth2mip/schema/EnsembleRun`.

Since we are working in a notebook, lets create this config Pythonically. There are
quite a few parameters that can be used, but lets focus in on a few key ones:

- `ensemble_members`: Number ensemble members in the forecast

- `noise_amplitude`: The amplitude of the noise pertibation method (we find that a good value to start with is `0.05`, feel free to experiment)

- `simulation_length`: Number of (6h) time-steps to predict

- `weather_event`: This defines the weather event as a combination of an initial time and a domain.

- `output_path`: The output location of the ensemble prediction netCDF file

- `weather_model`: The model ID to run. This MUST match the name of the model registry folder with your checkpoint files. So for this example its `fcnv2_sm`.

.. note::
  Note: While in later notebooks we will demonstrate more Pythonic methods to interact
  with Earth-2 MIP's APIs, the built in inference workflows provide a high-degree of
  control with little to no programming.

.. GENERATED FROM PYTHON SOURCE LINES 148-177

.. code-block:: Python

    config = {
        "ensemble_members": 4,
        "noise_amplitude": 0.05,
        "simulation_length": 10,
        "weather_event": {
            "properties": {
                "name": "Globe",
                "start_time": "2018-06-01 00:00:00",
                "initial_condition_source": "cds",
            },
            "domains": [
                {
                    "name": "global",
                    "type": "Window",
                    "diagnostics": [{"type": "raw", "channels": ["t2m", "u10m"]}],
                }
            ],
        },
        "output_path": "outputs/01_ensemble_notebook",
        "output_frequency": 1,
        "weather_model": "fcnv2_sm",
        "seed": 12345,
        "use_cuda_graphs": False,
        "ensemble_batch_size": 1,
        "autocast_fp16": False,
        "perturbation_strategy": "correlated",
        "noise_reddening": 2.0,
    }








.. GENERATED FROM PYTHON SOURCE LINES 178-185

Now we run the `main()` function in `earth2mip.inference_ensemble` providing our config
object which will run inference with the following steps:

1. Instantiate and load the FCNv2 small weather model onto the device
2. Download the initial state data needed from CDS using your saved API key
3. Perturb the initial state based on the parameters in the config and run a forecast predicton
4. Save output Xarray dataset to NetCDF file located in `../outputs/01_ensemble_notebook` (the process may take a while!)

.. GENERATED FROM PYTHON SOURCE LINES 187-197

.. code-block:: Python


    # Option 1: Use config file and CLI (use this outside a notebook)
    # with open('./01_config.json', 'w') as f:
    #     json.dump(config, f)
    # ! python3 -m earth2mip.inference_ensemble 01_config.json

    # Option 2: Feed in JSON string directly into main function
    config_str = json.dumps(config)
    inference_ensemble.main(config_str)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    INFO:root:Earth-2 MIP config loaded weather_model='fcnv2_sm' simulation_length=10 perturbation_strategy=<PerturbationStrategy.correlated: 'correlated'> perturbation_channels=None noise_reddening=2.0 noise_amplitude=0.05 output_frequency=1 output_grid=None ensemble_members=4 seed=12345 ensemble_batch_size=1 forecast_name=None weather_event=WeatherEvent(properties=WeatherEventProperties(name='Globe', start_time=datetime.datetime(2018, 6, 1, 0, 0), initial_condition_source=<InitialConditionSource.cds: 'cds'>, netcdf='', restart=''), domains=[Window(type='Window', name='global', lat_min=-90, lat_max=90, lon_min=0, lon_max=360, diagnostics=[Diagnostic(type='raw', function='', channels=['t2m', 'u10m'], nbins=10)])]) output_dir=None output_path='outputs/01_ensemble_notebook' restart_frequency=None grf_noise_alpha=2.0 grf_noise_sigma=5.0 grf_noise_tau=2.0
    INFO:root:Loading model onto device cuda:0
    INFO:root:Constructing initializer data source
    INFO:root:Running inference
    INFO:earth2mip.initial_conditions.cds:Found data in cache. Using /root/.cache/earth2mip/cds/554d2477eace4300c920ab161c2fa95b0053649ab9e5c8d43eaa9f5f9b6d248c/reanalysis-era5-pressure-levels.grib.
    INFO:earth2mip.initial_conditions.cds:Found data in cache. Using /root/.cache/earth2mip/cds/a4d33dfecb006b7ab66638da1c524bc2f379c7b5f2f954d904c72eeeeadfcb40/reanalysis-era5-single-levels.grib.
    INFO:inference:ensemble members 1-1/4
    INFO:inference:ensemble members 2-2/4
    INFO:inference:ensemble members 3-3/4
    INFO:inference:ensemble members 4-4/4
    INFO:inference:Ensemble forecast finished, saved to: outputs/01_ensemble_notebook/ensemble_out_0.nc




.. GENERATED FROM PYTHON SOURCE LINES 198-221

When the inference is complete we can examine the output in `outputs/01_ensemble_notebook/ensemble_out_0.nc`.

Note: if the inference is distributed across N GPUs there will be `ensemble_out_0.nc`, `ensemble_out_1.nc`, ... `ensemble_out_N-1.nc` output files.
In this case a function like this could concat the files to a single xarray DataArray:

.. code-block::

      def _open(f, domain, time, chunks={"time": 1}):
          root = xarray.open_dataset(f, decode_times=False)
          ds = xarray.open_dataset(f, chunks=chunks, group=domain)
          ds.attrs = root.attrs
          return ds.assign_coords(time=lead_time)

      def open_ensemble(path, domain, time):
          path = pathlib.Path(path)
          ensemble_files = list(path.glob("ensemble_out_*.nc"))
          return xarray.concat(
            [_open(f, group, time) for f in ensemble_files], dim="ensemble"
          )

(TODO: Parallel inference / scoring example)

But with our single NetCDF file we can load it into a `Xarray Dataset <https://docs.xarray.dev/en/stable/generated/xarray.Dataset.html>`_ with just a few lines of code.

.. GENERATED FROM PYTHON SOURCE LINES 223-239

.. code-block:: Python



    def open_ensemble(f, domain, chunks={"time": 1}):
        time = xarray.open_dataset(f).time
        root = xarray.open_dataset(f, decode_times=False)
        ds = xarray.open_dataset(f, chunks=chunks, group=domain)
        ds.attrs = root.attrs
        return ds.assign_coords(time=time)


    output_path = config["output_path"]
    domains = config["weather_event"]["domains"][0]["name"]
    ensemble_members = config["ensemble_members"]
    ds = open_ensemble(os.path.join(output_path, "ensemble_out_0.nc"), domains)
    ds






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div><svg style="position: absolute; width: 0; height: 0; overflow: hidden">
    <defs>
    <symbol id="icon-database" viewBox="0 0 32 32">
    <path d="M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z"></path>
    <path d="M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
    <path d="M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
    </symbol>
    <symbol id="icon-file-text2" viewBox="0 0 32 32">
    <path d="M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z"></path>
    <path d="M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    <path d="M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    <path d="M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    </symbol>
    </defs>
    </svg>
    <style>/* CSS stylesheet for displaying xarray objects in jupyterlab.
     *
     */

    :root {
      --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));
      --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));
      --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));
      --xr-border-color: var(--jp-border-color2, #e0e0e0);
      --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);
      --xr-background-color: var(--jp-layout-color0, white);
      --xr-background-color-row-even: var(--jp-layout-color1, white);
      --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);
    }

    html[theme=dark],
    body[data-theme=dark],
    body.vscode-dark {
      --xr-font-color0: rgba(255, 255, 255, 1);
      --xr-font-color2: rgba(255, 255, 255, 0.54);
      --xr-font-color3: rgba(255, 255, 255, 0.38);
      --xr-border-color: #1F1F1F;
      --xr-disabled-color: #515151;
      --xr-background-color: #111111;
      --xr-background-color-row-even: #111111;
      --xr-background-color-row-odd: #313131;
    }

    .xr-wrap {
      display: block !important;
      min-width: 300px;
      max-width: 700px;
    }

    .xr-text-repr-fallback {
      /* fallback to plain text repr when CSS is not injected (untrusted notebook) */
      display: none;
    }

    .xr-header {
      padding-top: 6px;
      padding-bottom: 6px;
      margin-bottom: 4px;
      border-bottom: solid 1px var(--xr-border-color);
    }

    .xr-header > div,
    .xr-header > ul {
      display: inline;
      margin-top: 0;
      margin-bottom: 0;
    }

    .xr-obj-type,
    .xr-array-name {
      margin-left: 2px;
      margin-right: 10px;
    }

    .xr-obj-type {
      color: var(--xr-font-color2);
    }

    .xr-sections {
      padding-left: 0 !important;
      display: grid;
      grid-template-columns: 150px auto auto 1fr 20px 20px;
    }

    .xr-section-item {
      display: contents;
    }

    .xr-section-item input {
      display: none;
    }

    .xr-section-item input + label {
      color: var(--xr-disabled-color);
    }

    .xr-section-item input:enabled + label {
      cursor: pointer;
      color: var(--xr-font-color2);
    }

    .xr-section-item input:enabled + label:hover {
      color: var(--xr-font-color0);
    }

    .xr-section-summary {
      grid-column: 1;
      color: var(--xr-font-color2);
      font-weight: 500;
    }

    .xr-section-summary > span {
      display: inline-block;
      padding-left: 0.5em;
    }

    .xr-section-summary-in:disabled + label {
      color: var(--xr-font-color2);
    }

    .xr-section-summary-in + label:before {
      display: inline-block;
      content: '►';
      font-size: 11px;
      width: 15px;
      text-align: center;
    }

    .xr-section-summary-in:disabled + label:before {
      color: var(--xr-disabled-color);
    }

    .xr-section-summary-in:checked + label:before {
      content: '▼';
    }

    .xr-section-summary-in:checked + label > span {
      display: none;
    }

    .xr-section-summary,
    .xr-section-inline-details {
      padding-top: 4px;
      padding-bottom: 4px;
    }

    .xr-section-inline-details {
      grid-column: 2 / -1;
    }

    .xr-section-details {
      display: none;
      grid-column: 1 / -1;
      margin-bottom: 5px;
    }

    .xr-section-summary-in:checked ~ .xr-section-details {
      display: contents;
    }

    .xr-array-wrap {
      grid-column: 1 / -1;
      display: grid;
      grid-template-columns: 20px auto;
    }

    .xr-array-wrap > label {
      grid-column: 1;
      vertical-align: top;
    }

    .xr-preview {
      color: var(--xr-font-color3);
    }

    .xr-array-preview,
    .xr-array-data {
      padding: 0 5px !important;
      grid-column: 2;
    }

    .xr-array-data,
    .xr-array-in:checked ~ .xr-array-preview {
      display: none;
    }

    .xr-array-in:checked ~ .xr-array-data,
    .xr-array-preview {
      display: inline-block;
    }

    .xr-dim-list {
      display: inline-block !important;
      list-style: none;
      padding: 0 !important;
      margin: 0;
    }

    .xr-dim-list li {
      display: inline-block;
      padding: 0;
      margin: 0;
    }

    .xr-dim-list:before {
      content: '(';
    }

    .xr-dim-list:after {
      content: ')';
    }

    .xr-dim-list li:not(:last-child):after {
      content: ',';
      padding-right: 5px;
    }

    .xr-has-index {
      font-weight: bold;
    }

    .xr-var-list,
    .xr-var-item {
      display: contents;
    }

    .xr-var-item > div,
    .xr-var-item label,
    .xr-var-item > .xr-var-name span {
      background-color: var(--xr-background-color-row-even);
      margin-bottom: 0;
    }

    .xr-var-item > .xr-var-name:hover span {
      padding-right: 5px;
    }

    .xr-var-list > li:nth-child(odd) > div,
    .xr-var-list > li:nth-child(odd) > label,
    .xr-var-list > li:nth-child(odd) > .xr-var-name span {
      background-color: var(--xr-background-color-row-odd);
    }

    .xr-var-name {
      grid-column: 1;
    }

    .xr-var-dims {
      grid-column: 2;
    }

    .xr-var-dtype {
      grid-column: 3;
      text-align: right;
      color: var(--xr-font-color2);
    }

    .xr-var-preview {
      grid-column: 4;
    }

    .xr-index-preview {
      grid-column: 2 / 5;
      color: var(--xr-font-color2);
    }

    .xr-var-name,
    .xr-var-dims,
    .xr-var-dtype,
    .xr-preview,
    .xr-attrs dt {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      padding-right: 10px;
    }

    .xr-var-name:hover,
    .xr-var-dims:hover,
    .xr-var-dtype:hover,
    .xr-attrs dt:hover {
      overflow: visible;
      width: auto;
      z-index: 1;
    }

    .xr-var-attrs,
    .xr-var-data,
    .xr-index-data {
      display: none;
      background-color: var(--xr-background-color) !important;
      padding-bottom: 5px !important;
    }

    .xr-var-attrs-in:checked ~ .xr-var-attrs,
    .xr-var-data-in:checked ~ .xr-var-data,
    .xr-index-data-in:checked ~ .xr-index-data {
      display: block;
    }

    .xr-var-data > table {
      float: right;
    }

    .xr-var-name span,
    .xr-var-data,
    .xr-index-name div,
    .xr-index-data,
    .xr-attrs {
      padding-left: 25px !important;
    }

    .xr-attrs,
    .xr-var-attrs,
    .xr-var-data,
    .xr-index-data {
      grid-column: 1 / -1;
    }

    dl.xr-attrs {
      padding: 0;
      margin: 0;
      display: grid;
      grid-template-columns: 125px auto;
    }

    .xr-attrs dt,
    .xr-attrs dd {
      padding: 0;
      margin: 0;
      float: left;
      padding-right: 10px;
      width: auto;
    }

    .xr-attrs dt {
      font-weight: normal;
      grid-column: 1;
    }

    .xr-attrs dt:hover span {
      display: inline-block;
      background: var(--xr-background-color);
      padding-right: 10px;
    }

    .xr-attrs dd {
      grid-column: 2;
      white-space: pre-wrap;
      word-break: break-all;
    }

    .xr-icon-database,
    .xr-icon-file-text2,
    .xr-no-icon {
      display: inline-block;
      vertical-align: middle;
      width: 1em;
      height: 1.5em !important;
      stroke-width: 0;
      stroke: currentColor;
      fill: currentColor;
    }
    </style><pre class='xr-text-repr-fallback'>&lt;xarray.Dataset&gt;
    Dimensions:  (lat: 721, lon: 1440, ensemble: 4, time: 11)
    Coordinates:
      * lat      (lat) float32 90.0 89.75 89.5 89.25 ... -89.25 -89.5 -89.75 -90.0
      * lon      (lon) float32 0.0 0.25 0.5 0.75 1.0 ... 359.0 359.2 359.5 359.8
      * time     (time) datetime64[ns] 2018-06-01 ... 2018-06-03T12:00:00
    Dimensions without coordinates: ensemble
    Data variables:
        imin     int64 ...
        imax     int64 ...
        jmin     int64 ...
        jmax     int64 ...
        t2m      (ensemble, time, lat, lon) float64 dask.array&lt;chunksize=(4, 1, 721, 1440), meta=np.ndarray&gt;
        u10m     (ensemble, time, lat, lon) float64 dask.array&lt;chunksize=(4, 1, 721, 1440), meta=np.ndarray&gt;
    Attributes:
        model:          fcnv2_sm
        config:         {&quot;weather_model&quot;: &quot;fcnv2_sm&quot;, &quot;simulation_length&quot;: 10, &quot;p...
        weather_event:  {&quot;properties&quot;: {&quot;name&quot;: &quot;Globe&quot;, &quot;start_time&quot;: &quot;2018-06-0...
        date_created:   2023-11-21T06:34:36.073913
        history:        /ngeneva/code/earth2mip/examples/01_ensemble_inference.py
        institution:    NVIDIA
        Conventions:    CF-1.10</pre><div class='xr-wrap' style='display:none'><div class='xr-header'><div class='xr-obj-type'>xarray.Dataset</div></div><ul class='xr-sections'><li class='xr-section-item'><input id='section-c8cef467-6e5d-46cb-a855-5dde720054ce' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-c8cef467-6e5d-46cb-a855-5dde720054ce' class='xr-section-summary'  title='Expand/collapse section'>Dimensions:</label><div class='xr-section-inline-details'><ul class='xr-dim-list'><li><span class='xr-has-index'>lat</span>: 721</li><li><span class='xr-has-index'>lon</span>: 1440</li><li><span>ensemble</span>: 4</li><li><span class='xr-has-index'>time</span>: 11</li></ul></div><div class='xr-section-details'></div></li><li class='xr-section-item'><input id='section-a62a02c2-4799-487e-90cd-939bf29e633a' class='xr-section-summary-in' type='checkbox'  checked><label for='section-a62a02c2-4799-487e-90cd-939bf29e633a' class='xr-section-summary' >Coordinates: <span>(3)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>lat</span></div><div class='xr-var-dims'>(lat)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>90.0 89.75 89.5 ... -89.75 -90.0</div><input id='attrs-7398f865-e41a-430a-959d-1627fae81242' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-7398f865-e41a-430a-959d-1627fae81242' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-6fa2a1ee-38d5-4ad2-a8e4-6d385de30d03' class='xr-var-data-in' type='checkbox'><label for='data-6fa2a1ee-38d5-4ad2-a8e4-6d385de30d03' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>units :</span></dt><dd>degrees_north</dd><dt><span>standard_name :</span></dt><dd>latitude</dd><dt><span>long_name :</span></dt><dd>latitude</dd></dl></div><div class='xr-var-data'><pre>array([ 90.  ,  89.75,  89.5 , ..., -89.5 , -89.75, -90.  ], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>lon</span></div><div class='xr-var-dims'>(lon)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>0.0 0.25 0.5 ... 359.2 359.5 359.8</div><input id='attrs-2f39620a-a46f-491e-9b86-9db0d1c29150' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-2f39620a-a46f-491e-9b86-9db0d1c29150' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-c24dcb0f-c03d-4438-81c1-04d3939e309b' class='xr-var-data-in' type='checkbox'><label for='data-c24dcb0f-c03d-4438-81c1-04d3939e309b' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>units :</span></dt><dd>degrees_east</dd><dt><span>standard_name :</span></dt><dd>longitude</dd><dt><span>long_name :</span></dt><dd>longitude</dd></dl></div><div class='xr-var-data'><pre>array([0.0000e+00, 2.5000e-01, 5.0000e-01, ..., 3.5925e+02, 3.5950e+02,
           3.5975e+02], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>time</span></div><div class='xr-var-dims'>(time)</div><div class='xr-var-dtype'>datetime64[ns]</div><div class='xr-var-preview xr-preview'>2018-06-01 ... 2018-06-03T12:00:00</div><input id='attrs-3efca526-998c-4c16-8685-db0a14a0d2bd' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-3efca526-998c-4c16-8685-db0a14a0d2bd' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-5debc74d-d991-4786-8777-c8fcc125211f' class='xr-var-data-in' type='checkbox'><label for='data-5debc74d-d991-4786-8777-c8fcc125211f' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;2018-06-01T00:00:00.000000000&#x27;, &#x27;2018-06-01T06:00:00.000000000&#x27;,
           &#x27;2018-06-01T12:00:00.000000000&#x27;, &#x27;2018-06-01T18:00:00.000000000&#x27;,
           &#x27;2018-06-02T00:00:00.000000000&#x27;, &#x27;2018-06-02T06:00:00.000000000&#x27;,
           &#x27;2018-06-02T12:00:00.000000000&#x27;, &#x27;2018-06-02T18:00:00.000000000&#x27;,
           &#x27;2018-06-03T00:00:00.000000000&#x27;, &#x27;2018-06-03T06:00:00.000000000&#x27;,
           &#x27;2018-06-03T12:00:00.000000000&#x27;], dtype=&#x27;datetime64[ns]&#x27;)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-b9ec0bc4-4261-4a6d-9278-d398fe1b2f87' class='xr-section-summary-in' type='checkbox'  checked><label for='section-b9ec0bc4-4261-4a6d-9278-d398fe1b2f87' class='xr-section-summary' >Data variables: <span>(6)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>imin</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>int64</div><div class='xr-var-preview xr-preview'>...</div><input id='attrs-89a7ad13-0ed3-4465-acee-8227baebf712' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-89a7ad13-0ed3-4465-acee-8227baebf712' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-e609ffeb-a31f-4450-a501-3ebbbf4e67c3' class='xr-var-data-in' type='checkbox'><label for='data-e609ffeb-a31f-4450-a501-3ebbbf4e67c3' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>[1 values with dtype=int64]</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>imax</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>int64</div><div class='xr-var-preview xr-preview'>...</div><input id='attrs-340776e5-14d8-4446-82c3-7a999ef94d0a' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-340776e5-14d8-4446-82c3-7a999ef94d0a' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-456a326a-4051-4b1f-91bb-22e803b3cf52' class='xr-var-data-in' type='checkbox'><label for='data-456a326a-4051-4b1f-91bb-22e803b3cf52' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>[1 values with dtype=int64]</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>jmin</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>int64</div><div class='xr-var-preview xr-preview'>...</div><input id='attrs-0f7f8313-d7bc-4d09-86e3-f16403ebe096' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-0f7f8313-d7bc-4d09-86e3-f16403ebe096' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-b3dba99d-510e-4472-8b79-6373b72f09e8' class='xr-var-data-in' type='checkbox'><label for='data-b3dba99d-510e-4472-8b79-6373b72f09e8' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>[1 values with dtype=int64]</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>jmax</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>int64</div><div class='xr-var-preview xr-preview'>...</div><input id='attrs-6c1b48dd-9b10-48ce-9d4d-a98f9db86558' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-6c1b48dd-9b10-48ce-9d4d-a98f9db86558' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-470441eb-a72f-4bd6-8db6-3f2c11cf3e25' class='xr-var-data-in' type='checkbox'><label for='data-470441eb-a72f-4bd6-8db6-3f2c11cf3e25' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>[1 values with dtype=int64]</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>t2m</span></div><div class='xr-var-dims'>(ensemble, time, lat, lon)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>dask.array&lt;chunksize=(4, 1, 721, 1440), meta=np.ndarray&gt;</div><input id='attrs-a6f09283-9d2f-4483-8cf6-522090ac742f' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-a6f09283-9d2f-4483-8cf6-522090ac742f' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-7e14d61f-171a-49e5-9985-441361553c76' class='xr-var-data-in' type='checkbox'><label for='data-7e14d61f-171a-49e5-9985-441361553c76' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><table>
        <tr>
            <td>
                <table style="border-collapse: collapse;">
                    <thead>
                        <tr>
                            <td> </td>
                            <th> Array </th>
                            <th> Chunk </th>
                        </tr>
                    </thead>
                    <tbody>
                    
                        <tr>
                            <th> Bytes </th>
                            <td> 348.53 MiB </td>
                            <td> 31.68 MiB </td>
                        </tr>
                    
                        <tr>
                            <th> Shape </th>
                            <td> (4, 11, 721, 1440) </td>
                            <td> (4, 1, 721, 1440) </td>
                        </tr>
                        <tr>
                            <th> Dask graph </th>
                            <td colspan="2"> 11 chunks in 2 graph layers </td>
                        </tr>
                        <tr>
                            <th> Data type </th>
                            <td colspan="2"> float64 numpy.ndarray </td>
                        </tr>
                    </tbody>
                </table>
            </td>
            <td>
            <svg width="374" height="125" style="stroke:rgb(0,0,0);stroke-width:1" >

      <!-- Horizontal lines -->
      <line x1="0" y1="0" x2="25" y2="0" style="stroke-width:2" />
      <line x1="0" y1="25" x2="25" y2="25" style="stroke-width:2" />

      <!-- Vertical lines -->
      <line x1="0" y1="0" x2="0" y2="25" style="stroke-width:2" />
      <line x1="25" y1="0" x2="25" y2="25" style="stroke-width:2" />

      <!-- Colored Rectangle -->
      <polygon points="0.0,0.0 25.412616514582485,0.0 25.412616514582485,25.412616514582485 0.0,25.412616514582485" style="fill:#ECB172A0;stroke-width:0"/>

      <!-- Text -->
      <text x="12.706308" y="45.412617" font-size="1.0rem" font-weight="100" text-anchor="middle" >4</text>
      <text x="45.412617" y="12.706308" font-size="1.0rem" font-weight="100" text-anchor="middle" transform="rotate(0,45.412617,12.706308)">1</text>


      <!-- Horizontal lines -->
      <line x1="95" y1="0" x2="109" y2="14" style="stroke-width:2" />
      <line x1="95" y1="60" x2="109" y2="75" style="stroke-width:2" />

      <!-- Vertical lines -->
      <line x1="95" y1="0" x2="95" y2="60" style="stroke-width:2" />
      <line x1="96" y1="1" x2="96" y2="61" />
      <line x1="97" y1="2" x2="97" y2="62" />
      <line x1="99" y1="4" x2="99" y2="64" />
      <line x1="100" y1="5" x2="100" y2="65" />
      <line x1="101" y1="6" x2="101" y2="66" />
      <line x1="103" y1="8" x2="103" y2="68" />
      <line x1="104" y1="9" x2="104" y2="69" />
      <line x1="105" y1="10" x2="105" y2="70" />
      <line x1="107" y1="12" x2="107" y2="72" />
      <line x1="108" y1="13" x2="108" y2="73" />
      <line x1="109" y1="14" x2="109" y2="75" style="stroke-width:2" />

      <!-- Colored Rectangle -->
      <polygon points="95.0,0.0 109.9485979497544,14.948597949754403 109.9485979497544,75.03193128308774 95.0,60.083333333333336" style="fill:#ECB172A0;stroke-width:0"/>

      <!-- Horizontal lines -->
      <line x1="95" y1="0" x2="215" y2="0" style="stroke-width:2" />
      <line x1="96" y1="1" x2="216" y2="1" />
      <line x1="97" y1="2" x2="217" y2="2" />
      <line x1="99" y1="4" x2="219" y2="4" />
      <line x1="100" y1="5" x2="220" y2="5" />
      <line x1="101" y1="6" x2="221" y2="6" />
      <line x1="103" y1="8" x2="223" y2="8" />
      <line x1="104" y1="9" x2="224" y2="9" />
      <line x1="105" y1="10" x2="225" y2="10" />
      <line x1="107" y1="12" x2="227" y2="12" />
      <line x1="108" y1="13" x2="228" y2="13" />
      <line x1="109" y1="14" x2="229" y2="14" style="stroke-width:2" />

      <!-- Vertical lines -->
      <line x1="95" y1="0" x2="109" y2="14" style="stroke-width:2" />
      <line x1="215" y1="0" x2="229" y2="14" style="stroke-width:2" />

      <!-- Colored Rectangle -->
      <polygon points="95.0,0.0 215.0,0.0 229.9485979497544,14.948597949754403 109.9485979497544,14.948597949754403" style="fill:#ECB172A0;stroke-width:0"/>

      <!-- Horizontal lines -->
      <line x1="109" y1="14" x2="229" y2="14" style="stroke-width:2" />
      <line x1="109" y1="75" x2="229" y2="75" style="stroke-width:2" />

      <!-- Vertical lines -->
      <line x1="109" y1="14" x2="109" y2="75" style="stroke-width:2" />
      <line x1="229" y1="14" x2="229" y2="75" style="stroke-width:2" />

      <!-- Colored Rectangle -->
      <polygon points="109.9485979497544,14.948597949754403 229.9485979497544,14.948597949754403 229.9485979497544,75.03193128308774 109.9485979497544,75.03193128308774" style="fill:#ECB172A0;stroke-width:0"/>

      <!-- Text -->
      <text x="169.948598" y="95.031931" font-size="1.0rem" font-weight="100" text-anchor="middle" >1440</text>
      <text x="249.948598" y="44.990265" font-size="1.0rem" font-weight="100" text-anchor="middle" transform="rotate(-90,249.948598,44.990265)">721</text>
      <text x="92.474299" y="87.557632" font-size="1.0rem" font-weight="100" text-anchor="middle" transform="rotate(45,92.474299,87.557632)">11</text>
    </svg>
            </td>
        </tr>
    </table></div></li><li class='xr-var-item'><div class='xr-var-name'><span>u10m</span></div><div class='xr-var-dims'>(ensemble, time, lat, lon)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>dask.array&lt;chunksize=(4, 1, 721, 1440), meta=np.ndarray&gt;</div><input id='attrs-2ce2c23d-2f4b-48f1-8409-4a47a99b049f' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-2ce2c23d-2f4b-48f1-8409-4a47a99b049f' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-7606a641-9171-478d-9e0e-1108a0356b56' class='xr-var-data-in' type='checkbox'><label for='data-7606a641-9171-478d-9e0e-1108a0356b56' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><table>
        <tr>
            <td>
                <table style="border-collapse: collapse;">
                    <thead>
                        <tr>
                            <td> </td>
                            <th> Array </th>
                            <th> Chunk </th>
                        </tr>
                    </thead>
                    <tbody>
                    
                        <tr>
                            <th> Bytes </th>
                            <td> 348.53 MiB </td>
                            <td> 31.68 MiB </td>
                        </tr>
                    
                        <tr>
                            <th> Shape </th>
                            <td> (4, 11, 721, 1440) </td>
                            <td> (4, 1, 721, 1440) </td>
                        </tr>
                        <tr>
                            <th> Dask graph </th>
                            <td colspan="2"> 11 chunks in 2 graph layers </td>
                        </tr>
                        <tr>
                            <th> Data type </th>
                            <td colspan="2"> float64 numpy.ndarray </td>
                        </tr>
                    </tbody>
                </table>
            </td>
            <td>
            <svg width="374" height="125" style="stroke:rgb(0,0,0);stroke-width:1" >

      <!-- Horizontal lines -->
      <line x1="0" y1="0" x2="25" y2="0" style="stroke-width:2" />
      <line x1="0" y1="25" x2="25" y2="25" style="stroke-width:2" />

      <!-- Vertical lines -->
      <line x1="0" y1="0" x2="0" y2="25" style="stroke-width:2" />
      <line x1="25" y1="0" x2="25" y2="25" style="stroke-width:2" />

      <!-- Colored Rectangle -->
      <polygon points="0.0,0.0 25.412616514582485,0.0 25.412616514582485,25.412616514582485 0.0,25.412616514582485" style="fill:#ECB172A0;stroke-width:0"/>

      <!-- Text -->
      <text x="12.706308" y="45.412617" font-size="1.0rem" font-weight="100" text-anchor="middle" >4</text>
      <text x="45.412617" y="12.706308" font-size="1.0rem" font-weight="100" text-anchor="middle" transform="rotate(0,45.412617,12.706308)">1</text>


      <!-- Horizontal lines -->
      <line x1="95" y1="0" x2="109" y2="14" style="stroke-width:2" />
      <line x1="95" y1="60" x2="109" y2="75" style="stroke-width:2" />

      <!-- Vertical lines -->
      <line x1="95" y1="0" x2="95" y2="60" style="stroke-width:2" />
      <line x1="96" y1="1" x2="96" y2="61" />
      <line x1="97" y1="2" x2="97" y2="62" />
      <line x1="99" y1="4" x2="99" y2="64" />
      <line x1="100" y1="5" x2="100" y2="65" />
      <line x1="101" y1="6" x2="101" y2="66" />
      <line x1="103" y1="8" x2="103" y2="68" />
      <line x1="104" y1="9" x2="104" y2="69" />
      <line x1="105" y1="10" x2="105" y2="70" />
      <line x1="107" y1="12" x2="107" y2="72" />
      <line x1="108" y1="13" x2="108" y2="73" />
      <line x1="109" y1="14" x2="109" y2="75" style="stroke-width:2" />

      <!-- Colored Rectangle -->
      <polygon points="95.0,0.0 109.9485979497544,14.948597949754403 109.9485979497544,75.03193128308774 95.0,60.083333333333336" style="fill:#ECB172A0;stroke-width:0"/>

      <!-- Horizontal lines -->
      <line x1="95" y1="0" x2="215" y2="0" style="stroke-width:2" />
      <line x1="96" y1="1" x2="216" y2="1" />
      <line x1="97" y1="2" x2="217" y2="2" />
      <line x1="99" y1="4" x2="219" y2="4" />
      <line x1="100" y1="5" x2="220" y2="5" />
      <line x1="101" y1="6" x2="221" y2="6" />
      <line x1="103" y1="8" x2="223" y2="8" />
      <line x1="104" y1="9" x2="224" y2="9" />
      <line x1="105" y1="10" x2="225" y2="10" />
      <line x1="107" y1="12" x2="227" y2="12" />
      <line x1="108" y1="13" x2="228" y2="13" />
      <line x1="109" y1="14" x2="229" y2="14" style="stroke-width:2" />

      <!-- Vertical lines -->
      <line x1="95" y1="0" x2="109" y2="14" style="stroke-width:2" />
      <line x1="215" y1="0" x2="229" y2="14" style="stroke-width:2" />

      <!-- Colored Rectangle -->
      <polygon points="95.0,0.0 215.0,0.0 229.9485979497544,14.948597949754403 109.9485979497544,14.948597949754403" style="fill:#ECB172A0;stroke-width:0"/>

      <!-- Horizontal lines -->
      <line x1="109" y1="14" x2="229" y2="14" style="stroke-width:2" />
      <line x1="109" y1="75" x2="229" y2="75" style="stroke-width:2" />

      <!-- Vertical lines -->
      <line x1="109" y1="14" x2="109" y2="75" style="stroke-width:2" />
      <line x1="229" y1="14" x2="229" y2="75" style="stroke-width:2" />

      <!-- Colored Rectangle -->
      <polygon points="109.9485979497544,14.948597949754403 229.9485979497544,14.948597949754403 229.9485979497544,75.03193128308774 109.9485979497544,75.03193128308774" style="fill:#ECB172A0;stroke-width:0"/>

      <!-- Text -->
      <text x="169.948598" y="95.031931" font-size="1.0rem" font-weight="100" text-anchor="middle" >1440</text>
      <text x="249.948598" y="44.990265" font-size="1.0rem" font-weight="100" text-anchor="middle" transform="rotate(-90,249.948598,44.990265)">721</text>
      <text x="92.474299" y="87.557632" font-size="1.0rem" font-weight="100" text-anchor="middle" transform="rotate(45,92.474299,87.557632)">11</text>
    </svg>
            </td>
        </tr>
    </table></div></li></ul></div></li><li class='xr-section-item'><input id='section-6dccf2cd-7da5-4578-9977-5149e1fe833f' class='xr-section-summary-in' type='checkbox'  ><label for='section-6dccf2cd-7da5-4578-9977-5149e1fe833f' class='xr-section-summary' >Indexes: <span>(3)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-index-name'><div>lat</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-a65390d4-2c30-4722-aa03-905f75999350' class='xr-index-data-in' type='checkbox'/><label for='index-a65390d4-2c30-4722-aa03-905f75999350' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Index([  90.0,  89.75,   89.5,  89.25,   89.0,  88.75,   88.5,  88.25,   88.0,
            87.75,
           ...
           -87.75,  -88.0, -88.25,  -88.5, -88.75,  -89.0, -89.25,  -89.5, -89.75,
            -90.0],
          dtype=&#x27;float32&#x27;, name=&#x27;lat&#x27;, length=721))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>lon</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-a48e3f9d-8437-428f-be6c-13f2dc538ebb' class='xr-index-data-in' type='checkbox'/><label for='index-a48e3f9d-8437-428f-be6c-13f2dc538ebb' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Index([   0.0,   0.25,    0.5,   0.75,    1.0,   1.25,    1.5,   1.75,    2.0,
             2.25,
           ...
            357.5, 357.75,  358.0, 358.25,  358.5, 358.75,  359.0, 359.25,  359.5,
           359.75],
          dtype=&#x27;float32&#x27;, name=&#x27;lon&#x27;, length=1440))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>time</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-ec177dd1-2386-485e-bea0-d949f67a5ce3' class='xr-index-data-in' type='checkbox'/><label for='index-ec177dd1-2386-485e-bea0-d949f67a5ce3' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(DatetimeIndex([&#x27;2018-06-01 00:00:00&#x27;, &#x27;2018-06-01 06:00:00&#x27;,
                   &#x27;2018-06-01 12:00:00&#x27;, &#x27;2018-06-01 18:00:00&#x27;,
                   &#x27;2018-06-02 00:00:00&#x27;, &#x27;2018-06-02 06:00:00&#x27;,
                   &#x27;2018-06-02 12:00:00&#x27;, &#x27;2018-06-02 18:00:00&#x27;,
                   &#x27;2018-06-03 00:00:00&#x27;, &#x27;2018-06-03 06:00:00&#x27;,
                   &#x27;2018-06-03 12:00:00&#x27;],
                  dtype=&#x27;datetime64[ns]&#x27;, name=&#x27;time&#x27;, freq=None))</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-8ebcee9d-bb89-404a-a323-3ca08c22016e' class='xr-section-summary-in' type='checkbox'  checked><label for='section-8ebcee9d-bb89-404a-a323-3ca08c22016e' class='xr-section-summary' >Attributes: <span>(7)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'><dt><span>model :</span></dt><dd>fcnv2_sm</dd><dt><span>config :</span></dt><dd>{&quot;weather_model&quot;: &quot;fcnv2_sm&quot;, &quot;simulation_length&quot;: 10, &quot;perturbation_strategy&quot;: &quot;correlated&quot;, &quot;perturbation_channels&quot;: null, &quot;noise_reddening&quot;: 2.0, &quot;noise_amplitude&quot;: 0.05, &quot;output_frequency&quot;: 1, &quot;output_grid&quot;: null, &quot;ensemble_members&quot;: 4, &quot;seed&quot;: 12345, &quot;ensemble_batch_size&quot;: 1, &quot;forecast_name&quot;: null, &quot;weather_event&quot;: {&quot;properties&quot;: {&quot;name&quot;: &quot;Globe&quot;, &quot;start_time&quot;: &quot;2018-06-01T00:00:00&quot;, &quot;initial_condition_source&quot;: &quot;cds&quot;, &quot;netcdf&quot;: &quot;&quot;, &quot;restart&quot;: &quot;&quot;}, &quot;domains&quot;: [{&quot;type&quot;: &quot;Window&quot;, &quot;name&quot;: &quot;global&quot;, &quot;lat_min&quot;: -90, &quot;lat_max&quot;: 90, &quot;lon_min&quot;: 0, &quot;lon_max&quot;: 360, &quot;diagnostics&quot;: [{&quot;type&quot;: &quot;raw&quot;, &quot;function&quot;: &quot;&quot;, &quot;channels&quot;: [&quot;t2m&quot;, &quot;u10m&quot;], &quot;nbins&quot;: 10}]}]}, &quot;output_dir&quot;: null, &quot;output_path&quot;: &quot;outputs/01_ensemble_notebook&quot;, &quot;restart_frequency&quot;: null, &quot;grf_noise_alpha&quot;: 2.0, &quot;grf_noise_sigma&quot;: 5.0, &quot;grf_noise_tau&quot;: 2.0}</dd><dt><span>weather_event :</span></dt><dd>{&quot;properties&quot;: {&quot;name&quot;: &quot;Globe&quot;, &quot;start_time&quot;: &quot;2018-06-01T00:00:00&quot;, &quot;initial_condition_source&quot;: &quot;cds&quot;, &quot;netcdf&quot;: &quot;&quot;, &quot;restart&quot;: &quot;&quot;}, &quot;domains&quot;: [{&quot;type&quot;: &quot;Window&quot;, &quot;name&quot;: &quot;global&quot;, &quot;lat_min&quot;: -90, &quot;lat_max&quot;: 90, &quot;lon_min&quot;: 0, &quot;lon_max&quot;: 360, &quot;diagnostics&quot;: [{&quot;type&quot;: &quot;raw&quot;, &quot;function&quot;: &quot;&quot;, &quot;channels&quot;: [&quot;t2m&quot;, &quot;u10m&quot;], &quot;nbins&quot;: 10}]}]}</dd><dt><span>date_created :</span></dt><dd>2023-11-21T06:34:36.073913</dd><dt><span>history :</span></dt><dd>/ngeneva/code/earth2mip/examples/01_ensemble_inference.py</dd><dt><span>institution :</span></dt><dd>NVIDIA</dd><dt><span>Conventions :</span></dt><dd>CF-1.10</dd></dl></div></li></ul></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 240-248

Post Processing
---------------
With inference complete, now the fun part: post processing and analysis!
You can manipulate the data to your hearts content now that its in an Xarray Dataset.
Here we will demonstrate some common plotting / analysis workflows one may be
interested. Lets start off with importing all our post processing packages.

(You may need to pip install matplotlib and cartopy)

.. GENERATED FROM PYTHON SOURCE LINES 250-266

.. code-block:: Python

    import cartopy.crs as ccrs
    import cartopy.feature as cfeature
    import matplotlib.colors as mcolors
    import matplotlib.pyplot as plt
    import numpy as np
    import pandas as pd
    from matplotlib.colors import TwoSlopeNorm

    countries = cfeature.NaturalEarthFeature(
        category="cultural",
        name="admin_0_countries",
        scale="50m",
        facecolor="none",
        edgecolor="black",
    )








.. GENERATED FROM PYTHON SOURCE LINES 267-270

Up first, we can plot a time series of the value of a variable (or statistics of that
variable) at a given location (lat/lon coord). In this case lets look at the results
predicted over New York.

.. GENERATED FROM PYTHON SOURCE LINES 272-298

.. code-block:: Python

    plt.close("all")
    lead_time = np.array(
        (pd.to_datetime(ds.time) - pd.to_datetime(ds.time)[0]).total_seconds() / 3600
    )
    nyc_lat = 40
    nyc_lon = 360 - 74
    NYC = ds.sel(lon=nyc_lon, lat=nyc_lat)
    fig = plt.figure(figsize=(9, 6))
    ax = fig.add_subplot(311)
    ax.set_title("Ensemble members")
    ax.plot(lead_time, NYC.u10m.T)
    ax.set_ylabel("u10m [m/s]")

    ax = fig.add_subplot(312)
    ax.set_title("deviation from ensemble mean")
    ax.plot(lead_time, NYC.t2m.T - NYC.t2m.mean("ensemble"))
    ax.set_ylabel("u10m [m/s]")

    ax = fig.add_subplot(313)
    ax.set_title("ensemble spread")
    ax.plot(lead_time, NYC.t2m.std("ensemble"))
    ax.set_xlabel("lead_time [h]")
    ax.set_ylabel("std u10m [m/s]")
    plt.tight_layout()
    plt.savefig(f"{output_path}/new_york_zonal_winds.png")




.. image-sg:: /examples/images/sphx_glr_01_ensemble_inference_001.png
   :alt: Ensemble members, deviation from ensemble mean, ensemble spread
   :srcset: /examples/images/sphx_glr_01_ensemble_inference_001.png, /examples/images/sphx_glr_01_ensemble_inference_001_2_00x.png 2.00x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 299-305

Next, lets plot some fields of surface temperature. Since we have an ensemble of
predictions, lets display the first ensemble member, which is deterministic member,
and also the last ensemble member and the ensemmble standard deviation. One or both of
the perturbed members may look a little noisy, thats because our noise amplitude is
maybe too high. Try lowering the amplitude in the config or changing pertibation type
to see what happens.

.. GENERATED FROM PYTHON SOURCE LINES 307-351

.. code-block:: Python

    plt.close("all")
    fig = plt.figure(figsize=(15, 10))
    plt.rcParams["figure.dpi"] = 100
    proj = ccrs.NearsidePerspective(central_longitude=nyc_lon, central_latitude=nyc_lat)

    data = ds.t2m[0, -1, :, :]
    norm = TwoSlopeNorm(vmin=220, vcenter=290, vmax=320)
    ax = fig.add_subplot(131, projection=proj)
    ax.set_title("First ensemble member t2m (K)")
    img = ax.pcolormesh(
        ds.lon, ds.lat, data, transform=ccrs.PlateCarree(), norm=norm, cmap="seismic"
    )
    ax.coastlines(linewidth=1)
    ax.add_feature(countries, edgecolor="black", linewidth=0.25)
    plt.colorbar(img, ax=ax, shrink=0.40, norm=mcolors.CenteredNorm(vcenter=0))
    gl = ax.gridlines(draw_labels=True, linestyle="--")

    data = ds.t2m[-1, -1, :, :]
    norm = TwoSlopeNorm(vmin=220, vcenter=290, vmax=320)
    ax = fig.add_subplot(132, projection=proj)
    plt.rcParams["figure.dpi"] = 100
    proj = ccrs.NearsidePerspective(central_longitude=nyc_lon, central_latitude=nyc_lat)
    ax.set_title("Last ensemble member t2m (K)")
    img = ax.pcolormesh(
        ds.lon, ds.lat, data, transform=ccrs.PlateCarree(), norm=norm, cmap="seismic"
    )
    ax.coastlines(linewidth=1)
    ax.add_feature(countries, edgecolor="black", linewidth=0.25)
    plt.colorbar(img, ax=ax, shrink=0.40, norm=mcolors.CenteredNorm(vcenter=0))
    gl = ax.gridlines(draw_labels=True, linestyle="--")

    ds_ensemble_std = ds.std(dim="ensemble")
    data = ds_ensemble_std.t2m[-1, :, :]
    # norm = TwoSlopeNorm(vmin=data.min().values, vcenter=5, vmax=data.max().values)
    proj = ccrs.NearsidePerspective(central_longitude=nyc_lon, central_latitude=nyc_lat)
    ax = fig.add_subplot(133, projection=proj)
    ax.set_title("ensemble std  t2m (K)")
    img = ax.pcolormesh(ds.lon, ds.lat, data, transform=ccrs.PlateCarree(), cmap="seismic")
    ax.coastlines(linewidth=1)
    ax.add_feature(countries, edgecolor="black", linewidth=0.25)
    plt.colorbar(img, ax=ax, shrink=0.40, norm=mcolors.CenteredNorm(vcenter=0))
    gl = ax.gridlines(draw_labels=True, linestyle="--")
    plt.savefig(f"{output_path}/gloabl_surface_temp_contour.png")




.. image-sg:: /examples/images/sphx_glr_01_ensemble_inference_002.png
   :alt: First ensemble member t2m (K), Last ensemble member t2m (K), ensemble std  t2m (K)
   :srcset: /examples/images/sphx_glr_01_ensemble_inference_002.png, /examples/images/sphx_glr_01_ensemble_inference_002_2_00x.png 2.00x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 352-354

We can also show a map of the ensemble mean of the 10 meter zonal winds (using some
Nvidia style coloring!)

.. GENERATED FROM PYTHON SOURCE LINES 356-388

.. code-block:: Python



    def Nvidia_cmap():
        colors = ["#8946ff", "#ffffff", "#00ff00"]
        cmap = mcolors.LinearSegmentedColormap.from_list("custom_cmap", colors)
        return cmap


    plt.close("all")
    ds_ensemble_mean = ds.mean(dim="ensemble")
    data = ds_ensemble_mean.u10m[-1, :, :]
    fig = plt.figure(figsize=(9, 6))
    plt.rcParams["figure.dpi"] = 100
    proj = ccrs.NearsidePerspective(central_longitude=nyc_lon, central_latitude=nyc_lat)

    ax = fig.add_subplot(111, projection=proj)
    ax.set_title("ens. mean 10 meter zonal wind [m/s]")
    img = ax.pcolormesh(
        ds.lon,
        ds.lat,
        data,
        transform=ccrs.PlateCarree(),
        cmap=Nvidia_cmap(),
        vmin=-20,
        vmax=20,
    )
    ax.coastlines(linewidth=1)
    ax.add_feature(countries, edgecolor="black", linewidth=0.25)
    plt.colorbar(img, ax=ax, shrink=0.40, norm=mcolors.CenteredNorm(vcenter=0))
    gl = ax.gridlines(draw_labels=True, linestyle="--")
    plt.savefig(f"{output_path}/gloabl_mean_zonal_wind_contour.png")




.. image-sg:: /examples/images/sphx_glr_01_ensemble_inference_003.png
   :alt: ens. mean 10 meter zonal wind [m/s]
   :srcset: /examples/images/sphx_glr_01_ensemble_inference_003.png, /examples/images/sphx_glr_01_ensemble_inference_003_2_00x.png 2.00x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 389-391

Finally lets compute the latitude-weighted global averages and plot time series of
ensemble standard deviation.

.. GENERATED FROM PYTHON SOURCE LINES 393-408

.. code-block:: Python



    def global_average(ds):
        cos_lat = np.cos(np.deg2rad(ds.lat))
        return ds.weighted(cos_lat).mean(["lat", "lon"])


    ds_ensemble_std = global_average(ds.std(dim="ensemble"))
    plt.close("all")
    plt.figure()
    plt.plot(lead_time, ds_ensemble_std.u10m)
    plt.xlabel("lead time [k]")
    plt.ylabel("u10m std [m/s]")
    plt.savefig(f"{output_path}/gloabl_std_zonal_surface_wind.png")




.. image-sg:: /examples/images/sphx_glr_01_ensemble_inference_004.png
   :alt: 01 ensemble inference
   :srcset: /examples/images/sphx_glr_01_ensemble_inference_004.png, /examples/images/sphx_glr_01_ensemble_inference_004_2_00x.png 2.00x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 409-412

And that completes the introductory notebook into running ensemble weather predictions
with AI. In the next notebook, we will look at running different models using more
Pythonic APIs and plotting geopotential fields.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (2 minutes 58.428 seconds)


.. _sphx_glr_download_examples_01_ensemble_inference.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 01_ensemble_inference.ipynb <01_ensemble_inference.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 01_ensemble_inference.py <01_ensemble_inference.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
